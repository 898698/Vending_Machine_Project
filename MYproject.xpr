#module to debounce pushbuttons
module Debounce(
    input pb,
    input clk_in,
    output led
    );
    wire clk_out;
    wire Q2,Q1,Q2_bar;
    D_FF D1(clk_out,pb,Q1);
    D_FF D2(clk_out,Q1,Q2);
    assign Q2_bar=~Q2;
    assign led =Q1&Q2_bar;
     
endmodule

#module to convert the input money into decimaal digit.
module Bnary_decimal(
    input [11:0] binary,
    output reg [3:0] thos,
    output reg [3:0] huns,
    output  reg[3:0] tens,
    output  reg[3:0] ones
    );
    reg [11:0] bcd_data=0;
    always @(binary)
    begin 
    bcd_data=binary;
    thos=bcd_data/1000;
    bcd_data=bcd_data%1000;
    huns=bcd_data/100;
    bcd_data=bcd_data%100;
   tens=bcd_data/10;
    ones =bcd_data%10; 
   end  
endmodule

#Seven segment display Code:

module Decoder_7_segment(
     bcd,
     seg
    );
     input [3:0] bcd;
     output [6:0] seg;
     reg [6:0] seg;
    always @(bcd)
    begin
        case (bcd) 
            0 : seg = 7'b0000001;
            1 : seg = 7'b1001111;
            2 : seg = 7'b0010010;
            3 : seg = 7'b0000110;
            4 : seg = 7'b1001100;
            5 : seg = 7'b0100100;
            6 : seg = 7'b0100000;
            7 : seg = 7'b0001111;
            8 : seg = 7'b0000000;
            9 : seg = 7'b0000100;
            default : seg = 7'b1111111; 
        endcase
    end
    
endmodule

#module to Display the digits in the four Seven Segment Display.

module Seven_Segment_Driver(
    input clk,
    input clr,
    input [3:0] in1,
    input [3:0] in2,
    input [3:0] in3,
    input [3:0] in4,
    output reg [6:0] seg,
    output  reg [3:0] an
    );
    wire [6:0]seg1,seg2,seg3,seg4;
    reg [12:0] segclk;//helps in turning of all the segments 
    parameter LEFT=2'b00,MIDLEFT=2'b01,MIDRIGHT=2'b10,RIGHT=2'b11;
    reg [1:0]state=LEFT;

Decoder_7_Segment(in1,seg1);
Decoder_7_Segment(in2,seg2);
Decoder_7_Segment(in3,seg3);
Decoder_7_Segment(in4,seg4);

    always @(posedge clk)
    segclk<=segclk+1;
    always @(posedge segclk[12],posedge clr)
    begin
    if (clr)
    begin
    seg<=0000000;
    an<=4'b0000;
    state<=LEFT;
    end 
   else
   begin 
   case (state)
   LEFT:
   begin
   seg<=seg1;
   an<=4'b0111;
   state<=MIDLEFT;
    end
     MIDLEFT:
     begin
     seg<=seg2;
     an<=4'b1011;
     state<=MIDRIGHT;
     end
     
     
     MIDRIGHT:
     begin
     seg<=seg3;
     an<=4'b1101;
     state<=MIDLEFT;
     end
     
     RIGHT:
     begin
     seg<=seg4;
     an<=4'b1110;
     state<=LEFT;
     end
    endcase
end
end
   
    
    endmodule


##Vending Machine 

module Vending_machine(
    input clk,
    input reset,
    input quater,
    input dollar,
    input [3:0] select,
    input buy,
    input [3:0] load,
    output reg [11:0] money=0,
    output reg [3:0] product=0,
    output reg [3:0] out_of_stock=0
    );
    reg quater_prev;
    reg dollar_prev;
    reg buy_prev;
    reg [3:0]stock0=4'b1111;
    reg [3:0]stock1=4'b1111;
    reg [3:0]stock2=4'b1111;
    reg [3:0]stock3=4'b1111;
    
    
    
    always @(posedge clk)
    begin
     quater_prev<=quater_prev;
     dollar_prev<=dollar_prev;
     buy_prev<=buy;
     
     
    if (reset)
    money=0;
    else if (quater_prev==0 && quater==1)
    money<=money+25;
     else if (dollar_prev==0 && dollar==1)
    money<=money+25;
    else if(buy_prev==0 && buy==1)
    case(select)
    4'b0001:
    begin
    if(money>=12'd25 && stock0>0)
    money<=money-25;
    stock0<=(stock0)-1'b1;
    product[0]<=1;
    end
    
     4'b0010:
    begin
    if(money>=12'd50 && stock1>0)
    money<=money-50;
    stock1<=(stock1)-1'b1;
    product[1]<=1;
    end
     4'b0100:
    begin
    if(money>=12'd75 && stock2>0)
    money<=money-75;
    stock2<=(stock2)-1'b1;
    product[2]<=1;
    end
     4'b1000:
    begin
    if(money>=12'd100 && stock3>0)
    money<=money-100;
    stock3<=(stock3)-1'b1;
    product[3]<=1;
    end
    endcase
   
else if(buy_prev==1 && buy==0)
    begin 
    product[0]=0;
    product[1]=0;
    product[2]=0;
    product[3]=0;
    end 
    
 else 
    begin 
    if(stock0==0)
    out_of_stock[0]=1;
    
    else out_of_stock[0]=0;
    if(stock1==0)
    out_of_stock[1]=1;
    else out_of_stock[1]=0;
    
    if(stock2==0)
    out_of_stock[2]=1;
    else out_of_stock[2]=0;
    
    if(stock3==0)
    out_of_stock[3]=1;
    else out_of_stock[3]=0;
    
    end
    
    case(load)
    4'b0001:stock0<=4'b1111;
    4'b0010:stock1<=4'b1111;
    4'b0100:stock2<=4'b1111;
    4'b1000:stock3<=4'b1111;
    endcase 
      end  
endmodule
#TOP MODULE (ALL TOGETHER)
module Top_Module(
    input clk,
    input btnU,//reset
    input btnC,//buy
    input btnR,//quater
    input btnL,//dollar
    input [7:0] sw,//pehla 4 slect karne ke liye ,baki char load karne ke liye
    output [7:0] led,//pehla char konsa select hua he boh dikhayega,next 4 out  of stock ko dikhata he
    output  [6:0] seg,//display wla
    output   [3:0] an//konsa segment use horaha he 4 mein se//anode control
    
    );
    wire [11:0] money;//pesa kitna dala
    
    
    wire deb_btnC,deb_btnR,deb_btnL,deb_btnU;
    Debounce    dbnU(clk,btnC,deb_btnU);
    Debounce    dbnC(clk,btnC,deb_btnC);
     Debounce   dbnR(clk,btnR,deb_btnR);
    Debounce    dbnL(clk,btnL,deb_btnL); 
    wire [3:0]thos,huns,tens,ones;
    Bnary_decimal BCD(money,thos,huns,tens,one);
    
    Seven_Segment_Driver SSD(clk,deb_btnU,thos,huns,tens,ones,seg,an);
    Vending_machine(clk,deb_btnU,deb_btnR,deb_btnL,sw[3:0],deb_btnC,sw[7:4],money,led[3:0],led[7:4]);
    endmodule








